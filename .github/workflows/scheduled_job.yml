# .github/workflows/scheduled_job.yml
name: Run Python Script on a Schedule

on:
  schedule:
    # 这是一个 cron 表达式，表示在 UTC 时间的每天早上 8:00 执行
    # 注意：GitHub Actions 的时间是 UTC 标准时间，比北京时间晚 8 小时
    # 所以 UTC 00:00 对应北京时间 08:00
    - cron: '0 0 * * *' # 这个表示每天的 UTC 0点（北京时间早上8点）执行
  workflow_dispatch: # 这个选项允许你手动在 Actions 页面点击按钮来测试运行

jobs:
  run-python-script:
    runs-on: ubuntu-latest
    permissions:
      contents: write # 赋予写入仓库内容的权限
    
    steps:
    # 第一步：检出（下载）你的代码到虚拟机环境
    - name: Checkout repository
      uses: actions/checkout@v3

    # 第二步：设置你需要的 Python 版本
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # 第三步：（可选）如果你的脚本需要第三方库，安装它们
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # 第四步：执行你的 Python 脚本
    - name: Run script
      run: python clash.py # 换成你的脚本文件名

# 新增步骤：配置 Git 用户
    - name: Set up Git user
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
     # 新增步骤：提交并推送更改
    - name: Commit and push changes
      run: |
        # 检查是否有文件更改。如果没有，此步骤将自动退出。
        if ! git diff --exit-code; then
            # 暂存所有更改（新增、修改、删除的文件）
            git add .
            # 提交更改
            git commit -m "chore: Update files generated by scheduled script"
            # 推送到仓库
            git push
        fi